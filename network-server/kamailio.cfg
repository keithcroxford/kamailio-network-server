#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v5.2 - default configuration script
#     - web: https://www.kamailio.org
#     - git: https://github.com/kamailio/kamailio
#
# Direct your questions about this file to: <sr-users@lists.kamailio.org>
#
# Refer to the Core CookBook at https://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#

####### Defined Values #########

#!define MULTIDOMAIN 0

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

#!define FLT_A_ON_NET 20
#!define FLT_B_ON_NET 22
#!define FLT_DENY_ADMISSION 23
#!define FLT_DENY_CALL 24


####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=2
log_stderror=yes

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes */
children=2

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
# auto_aliases=no

/* add local domain aliases */
# alias="sip.mydomain.com"


####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

####### Modules Section ########

/* set paths to location of modules */
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "dmq.so"
loadmodule "db_mysql.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "ipops.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "uac.so"
loadmodule "counters.so"
loadmodule "htable.so"


####### Other Args and Env Vars #########
#!substdef "/DEFAULT_DEST/$env(DEFAULT_DEST):5060/"
#!substdef "/MYIP/$env(MYIP)/"
#!substdef "/LOCAL_SOCKET/$env(LOCAL_SOCKET)/"
#!substdef "/PEERNAME/$env(PEERNAME)/"

/* listen addresses */
#listen=udp:127.0.0.1:5060
#listen='LOCAL_SOCKET'

# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

modparam("htable", "db_url", "mysql://user:password@172.16.10.254/db")


# ---- htable params ----
modparam("htable", "enable_dmq", 1)
modparam("htable", "htable", "dnis=>size=14;dmqreplicate=1;dbtable=dnis;")
modparam("htable", "htable", "deny_list=>size=5;dmqreplicate=1;")
modparam("htable", "htable", "active_calls=>size=5;dmqreplicate=1;")
modparam("htable", "htable", "admission_limits=>size=5;dmqreplicate=1;")


modparam("dmq", "server_address", "sip:MYIP:5060")
modparam("dmq", "notification_address", "sip:PEERNAME:5060")

####### Routing Logic ########

request_route {
  route(HANDLE_DMQ);
  route(HANDLE_OPTIONS);

  if (is_method("INVITE")) {
    route(IS_A_ON_NET);
    route(GET_X_CUSTOMER_ID);
    route(IS_B_ON_NET);
    route(SET_CALL_TYPE);
    route(IS_DENIED);
    route(CALL_ADMISSION_CONTROL);
    route(REPLY_302);
  } else {
    xlog("L_INFO", "MAIN | $ci | Non INVITE received.");
  }
}

route[CALL_ADMISSION_CONTROL] {
  # This checks the number of active calls for this user against the max number permitted for
  # the customer account
  xlog("L_INFO", "CALL_ADMISSION_CONTROL | $sht(dnis=>$rU) \n");
  if ($sht(active_calls=>$var(customer))) {
    if ( $sht(admission_limits=>$var(customer)) >= $sht(active_calls=>$var(customer)) )  {
      route(DENY_ADMISSION);
      return 0;
    }
  } else {
    return 0;
  }
}

route[DENY_ADMISSION] {
  # Denies the call as the customer has exceeded their current calls capacity.
  append_to_reply("X-Deny-Reason: Call Limit Reached\n");
  sl_send_reply("403", "You have exceeded the number of calls permitted. Please contact Support ");
  exit;
}

route[DENY_CALL] {
  # Denies a call because the B number is in the naughty list.
  xlog("L_INFO", "DENY_CALL | $ci $rU \n");
  append_to_reply("X-Deny-Reason: Calls to this destination number are not allowed\n");
  sl_send_reply("403", "Calls Cannot be made to this number");
  exit;
}

route[GET_X_CUSTOMER_ID] {
  # This route block checks to see if another proxy has added
  # the x-customer-id header showing, which implies that the call originated
  # from a known customer

  if !isflagset(FLT_A_ON_NET) {
    if(is_present_hf("X-CUSTOMER-ID")) {
      setflag(FLT_A_ON_NET);
      $var(customer) = $(hdr(X-CUSTOMER-ID));
      return 1;
    } else {
      return 0;
    }
  }
}

route[HANDLE_DMQ]{
  if(is_method("KDMQ"))
   {
           dmq_handle_message();
   }
}

route[HANDLE_OPTIONS]{
  if(is_method("OPTIONS"))
   {
           sl_send_reply(200, "OK");
           exit;
   }
}

route[IS_A_ON_NET] {
  # This route block tests the originating number to determine if it is linked the platform
  xlog("L_INFO", "IS_A_ON_NET | $sht(dnis=>$fU) \n");
  if ($sht(dnis=>$fu)) {
    setflag(FLT_A_ON_NET);
    return 1;
  } else {
    resetflag(FLT_A_ON_NET);
    return 0;
  }
}

route[IS_B_ON_NET] {
  # Tests the B number to determine if this call is to an on-net number
  xlog("L_INFO", "IS_B_ON_NET | $sht(dnis=>$rU) \n");
  if ($sht(dnis=>$rU) != $null) {
    xlog("L_INFO", "IS_B_ON_NET | Trying to set flag \n");
    setflag(FLT_B_ON_NET);
    return 1;
  } else {
    resetflag(FLT_B_ON_NET);
    return 0;
  }
}

route[IS_DENIED] {
  # Looks up the B number to determine if it is known "bad" destination
  xlog("L_INFO", "IS_DENIED| $sht(deny_list=>$rU) \n");
  if ($sht(deny_list=>$rU)) != $null {
    route(DENY_CALL);
  } else {
    return 0;
  }
}

route[REPLY_302] {
  # Sends a 302 redirect back to the proxy that requested the routing lookup
  xlog("L_INFO", "REPLY_302 \n");
  if isflagset(FLT_B_ON_NET) {
    xlog("L_INFO", "REPLY_302 | B IS ON NET $sht(dnis=>$rU) \n");
    append_to_reply("Contact: sip:$rU@$sht(dnis=>$rU)\r\n");
  } else {
    append_to_reply("Contact: sip:$rU@" + 'DEFAULT_DEST' + "\r\n");
  }
  sl_send_reply("302", "Redirect");
  exit;
}

route[SET_CALL_TYPE] {
  # This just sets a log entry based on the call type
  xlog("L_INFO", "SET_CALL_TYPE \n");
  if isflagset(FLT_A_ON_NET) && !isflagset(FLT_B_ON_NET) {
    xlog("L_INFO", "This is an on-net to pstn call \n");
    return;
  }
  if !isflagset(FLT_A_ON_NET) && isflagset(FLT_B_ON_NET) {
    xlog("L_INFO", "This is an off-net to on-net call \n");
    return;
  }
  if isflagset(FLT_A_ON_NET) && isflagset(FLT_B_ON_NET) {
    xlog("L_INFO", "This is an on-net to on-net call \n");
  }

}
